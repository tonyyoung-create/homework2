<#
publish_model.ps1

Utility to create a GitHub Release and upload model artifacts using GitHub CLI (gh).

Prerequisites:
- GitHub CLI (gh) installed and authenticated locally: https://cli.github.com/
- You have push access to the repository and permission to create releases.

Usage examples:

# Create a release with automatic tag and upload two artifacts
.
# PowerShell:
#   .\scripts\publish_model.ps1 -ModelPath models\spam_detector.joblib -VectorizerPath models\spam_detector_vectorizer.joblib

# Create a release with a specific tag and release name
#   .\scripts\publish_model.ps1 -ModelPath models\spam_detector.joblib -VectorizerPath models\spam_detector_vectorizer.joblib -Tag v1.0.0 -ReleaseName "v1.0.0 - Spam model"

Parameters:
-ModelPath         Path to the model artifact (default: models\spam_detector.joblib)
-VectorizerPath    Path to the vectorizer artifact (default: models\spam_detector_vectorizer.joblib)
-Tag               Git tag / release tag to create (if not provided a timestamped tag will be used)
-ReleaseName       Release title (defaults to tag)
-Notes             Release notes (defaults to autogenerated message)
-Repo              Repository in owner/repo format. If not provided the local git remote 'origin' will be used.

This script performs:
- basic checks for gh and files
- creates a Git tag if provided (or uses generated tag)
- creates a GitHub Release and uploads the two model files
#>

param (
    [string]$ModelPath = "models\spam_detector.joblib",
    [string]$VectorizerPath = "models\spam_detector_vectorizer.joblib",
    [string]$Tag = "",
    [string]$ReleaseName = "",
    [string]$Notes = "",
    [string]$Repo = ""
)

function Fail([string]$msg) {
    Write-Error $msg
    exit 1
}

# Check gh availability
if (-not (Get-Command gh -ErrorAction SilentlyContinue)) {
    Fail "GitHub CLI 'gh' is not installed or not in PATH. Install from https://cli.github.com/ and authenticate ('gh auth login')."
}

# Resolve repo if not provided
if (-not $Repo) {
    try {
        $remoteUrl = (git remote get-url origin) -ErrorAction Stop
        # remoteUrl could be git@github.com:owner/repo.git or https://github.com/owner/repo.git
        if ($remoteUrl -match 'github.com[:/](.+?)(\.git)?$') {
            $Repo = $Matches[1]
        }
    } catch {
        Fail "Cannot detect remote repo. Provide -Repo owner/repo or run this script inside a git repo with 'origin' remote."
    }
}

# Ensure files exist
if (-not (Test-Path $ModelPath)) { Fail "Model file not found: $ModelPath" }
if (-not (Test-Path $VectorizerPath)) { Fail "Vectorizer file not found: $VectorizerPath" }

# Generate tag if not provided
if (-not $Tag) {
    $now = Get-Date -Format "yyyyMMdd-HHmmss"
    $Tag = "model-$now"
}

if (-not $ReleaseName) { $ReleaseName = $Tag }
if (-not $Notes) { $Notes = "Release $Tag - model artifacts uploaded." }

Write-Host "Using repo: $Repo"
Write-Host "Creating release: $Tag"

# Create release with assets
$createArgs = @($Tag, "-t", $ReleaseName, "-n", $Notes, "--repo", $Repo)
try {
    gh release create @createArgs $ModelPath $VectorizerPath
} catch {
    Fail "gh release create failed: $_"
}

Write-Host "Release created and assets uploaded successfully."
Write-Host "Model URL suggestions (raw access):"
Write-Host " - GitHub release asset URLs are available in the release page; use those as MODEL_URL and VECTORIZER_URL in Streamlit Cloud."

Write-Host "Done."
